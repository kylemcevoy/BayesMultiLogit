% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multilogit_PG.R
\name{multilogit_PG}
\alias{multilogit_PG}
\title{Multinomial Logistic Regression using the Polya-Gamma Method}
\usage{
multilogit_PG(
  Y,
  X,
  n_sample = 1000L,
  n_burn = 200L,
  probs = TRUE,
  progress = TRUE
)
}
\arguments{
\item{Y}{An N by C numeric matrix where the ith row is a set of
indicators for observation i of N giving which of the C categories the
observation is classified into.}

\item{X}{An N by P numeric matrix where the ith row gives
the values of the predictor variables for the ith outcome observation. 
The first column of X should be an intercept column of 1's.
Non-intercept X columns should be centered and scaled by their standard deviations for best results.}

\item{n_sample}{positive integer giving the number of samples to draw as
output after burn-in.}

\item{n_burn}{non-negative integer giving the number of samples of burn-in
before the chain output is saved.}

\item{probs}{logical If TRUE probabilities are calculated and returned.}

\item{progress}{logical If TRUE, the function reports progress every thousandth iteration.}
}
\value{
List object containing posterior_coef, the chain of coefficient
values as an P by C by n_sample array. If probs are TRUE, posterior_prob a N by C by
n_sample array containing the calculated probabilities of the observations
being classified into each of the C categories is also returned in the list.
}
\description{
WARNING: This function can result in R freezing in a non-interruptable state.

This is an R wrapper to the function \code{multilogit_PG_C}.
This function implements the Polya-Gamma method for
multinomial logistic regression. Rewritten for C++ by Jared Fisher
and Kyle McEvoy, but code originally written by Jesse Windle, James Scott and Nick Polson.

Copyright 2013 Nick Polson, James Scott, and Jesse Windle.
This file is part of BayesLogit, distributed under the GNU General Public
License version 3 or later and without ANY warranty, implied or otherwise.
}
\examples{
Y <- matrix(0, nrow = 150, ncol = 3)
Y <- sapply(c(1,2,3), function(x) Y[, x] <- as.numeric((as.numeric(iris$Species) == x) )) 
X <- scale(iris[ , 1:4])
X <- cbind(1, X)
out2 <- multilogit_PG(Y, X, n_sample = 2000, n_burn = 1000, probs = TRUE, progress = TRUE)
}
