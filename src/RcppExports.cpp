// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dmvnrm_arma
double dmvnrm_arma(arma::rowvec const& x, arma::rowvec const& mean, arma::mat const& sigma, bool const logd);
RcppExport SEXP _BayesMultiLogit_dmvnrm_arma(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec const& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool const >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnrm_arma(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// metropolis_sampler
List metropolis_sampler(arma::mat const& Y, arma::mat const& X, size_t n_sample, size_t n_burn, String prior, double step_size, Nullable<NumericVector> prior_mean, Nullable<NumericMatrix> prior_var, Nullable<IntegerVector> reference_cat, bool probs, bool progress);
RcppExport SEXP _BayesMultiLogit_metropolis_sampler(SEXP YSEXP, SEXP XSEXP, SEXP n_sampleSEXP, SEXP n_burnSEXP, SEXP priorSEXP, SEXP step_sizeSEXP, SEXP prior_meanSEXP, SEXP prior_varSEXP, SEXP reference_catSEXP, SEXP probsSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< String >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type prior_mean(prior_meanSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type prior_var(prior_varSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type reference_cat(reference_catSEXP);
    Rcpp::traits::input_parameter< bool >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(metropolis_sampler(Y, X, n_sample, n_burn, prior, step_size, prior_mean, prior_var, reference_cat, probs, progress));
    return rcpp_result_gen;
END_RCPP
}
// multilogit_C
List multilogit_C(arma::mat const& Y, arma::mat const& X, size_t n_sample, size_t n_burn, size_t n_sigma_check, String prior, double step_size, Nullable<NumericVector> prior_mean, Nullable<NumericMatrix> prior_var, Nullable<IntegerVector> reference_cat, bool probs, bool progress);
RcppExport SEXP _BayesMultiLogit_multilogit_C(SEXP YSEXP, SEXP XSEXP, SEXP n_sampleSEXP, SEXP n_burnSEXP, SEXP n_sigma_checkSEXP, SEXP priorSEXP, SEXP step_sizeSEXP, SEXP prior_meanSEXP, SEXP prior_varSEXP, SEXP reference_catSEXP, SEXP probsSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_sigma_check(n_sigma_checkSEXP);
    Rcpp::traits::input_parameter< String >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type prior_mean(prior_meanSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type prior_var(prior_varSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type reference_cat(reference_catSEXP);
    Rcpp::traits::input_parameter< bool >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(multilogit_C(Y, X, n_sample, n_burn, n_sigma_check, prior, step_size, prior_mean, prior_var, reference_cat, probs, progress));
    return rcpp_result_gen;
END_RCPP
}
// multilogit_C_ESS
List multilogit_C_ESS(arma::mat const& Y, arma::mat const& X, size_t n_sample, size_t n_burn, Nullable<NumericVector> prior_mean, Nullable<NumericMatrix> prior_var, Nullable<IntegerVector> reference_cat, bool probs, bool progress);
RcppExport SEXP _BayesMultiLogit_multilogit_C_ESS(SEXP YSEXP, SEXP XSEXP, SEXP n_sampleSEXP, SEXP n_burnSEXP, SEXP prior_meanSEXP, SEXP prior_varSEXP, SEXP reference_catSEXP, SEXP probsSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type prior_mean(prior_meanSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type prior_var(prior_varSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type reference_cat(reference_catSEXP);
    Rcpp::traits::input_parameter< bool >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(multilogit_C_ESS(Y, X, n_sample, n_burn, prior_mean, prior_var, reference_cat, probs, progress));
    return rcpp_result_gen;
END_RCPP
}
// multilogit_holmesheld_C
List multilogit_holmesheld_C(arma::mat const& Y, arma::mat const& X, arma::mat const& v, size_t n_sample, size_t n_burn, bool probs, bool progress);
RcppExport SEXP _BayesMultiLogit_multilogit_holmesheld_C(SEXP YSEXP, SEXP XSEXP, SEXP vSEXP, SEXP n_sampleSEXP, SEXP n_burnSEXP, SEXP probsSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type v(vSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< bool >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(multilogit_holmesheld_C(Y, X, v, n_sample, n_burn, probs, progress));
    return rcpp_result_gen;
END_RCPP
}
// multilogit_PG_C
List multilogit_PG_C(arma::mat const& Y, arma::mat const& X, size_t n_sample, size_t n_burn, bool probs, bool progress);
RcppExport SEXP _BayesMultiLogit_multilogit_PG_C(SEXP YSEXP, SEXP XSEXP, SEXP n_sampleSEXP, SEXP n_burnSEXP, SEXP probsSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< bool >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(multilogit_PG_C(Y, X, n_sample, n_burn, probs, progress));
    return rcpp_result_gen;
END_RCPP
}
// multilogit_hh_inv_C
List multilogit_hh_inv_C(arma::mat const& Y, arma::mat const& X, arma::mat const& v, size_t n_sample, size_t n_burn, bool probs, bool progress);
RcppExport SEXP _BayesMultiLogit_multilogit_hh_inv_C(SEXP YSEXP, SEXP XSEXP, SEXP vSEXP, SEXP n_sampleSEXP, SEXP n_burnSEXP, SEXP probsSEXP, SEXP progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type v(vSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< size_t >::type n_burn(n_burnSEXP);
    Rcpp::traits::input_parameter< bool >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    rcpp_result_gen = Rcpp::wrap(multilogit_hh_inv_C(Y, X, v, n_sample, n_burn, probs, progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesMultiLogit_dmvnrm_arma", (DL_FUNC) &_BayesMultiLogit_dmvnrm_arma, 4},
    {"_BayesMultiLogit_metropolis_sampler", (DL_FUNC) &_BayesMultiLogit_metropolis_sampler, 11},
    {"_BayesMultiLogit_multilogit_C", (DL_FUNC) &_BayesMultiLogit_multilogit_C, 12},
    {"_BayesMultiLogit_multilogit_C_ESS", (DL_FUNC) &_BayesMultiLogit_multilogit_C_ESS, 9},
    {"_BayesMultiLogit_multilogit_holmesheld_C", (DL_FUNC) &_BayesMultiLogit_multilogit_holmesheld_C, 7},
    {"_BayesMultiLogit_multilogit_PG_C", (DL_FUNC) &_BayesMultiLogit_multilogit_PG_C, 6},
    {"_BayesMultiLogit_multilogit_hh_inv_C", (DL_FUNC) &_BayesMultiLogit_multilogit_hh_inv_C, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesMultiLogit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
